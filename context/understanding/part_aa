---
title: "Understanding Computer Networks by Analogy"
date: 2024-12-20T01:53:23+01:00
draft: true
---

I wrote this for the younger (and less handsome) version of myself from university who found networking concepts challenging. If you’re reading this and you are also struggling with these concepts, just know this isn’t a complete map of the "networking world", it is simply a different way to see it. I hope you find this analogy helpful.

I've decided to stick with analogies here instead of going deep into technical terms, you can find those easily anywhere, because I enjoy looking at the world from different perspectives. It's fascinating how many connections you can make when you approach things from a new angle.

I understand that analogies have their limits and sometimes you have to stretch things to make them work. In those cases, maybe it’s better to stick to first principles. But honestly, I find analogies more fun, especially for abstract concepts like computer networks.

Finally, I want to emphasize that this analogy isn’t meant to be an exact representation of the "world of networking". It’s simply a learning tool to help view computer networks from a different perspective.

What to expect: We’ll be comparing computer networks to things you encounter in everyday life. Our main analogy is that of buildings and cities:

 In Part 1 (Building the Foundation), we start small: a single building representing a network. We’ll explore rooms (computers), hallways (connections), floor managers (switches), and so on – the fundamental pieces that make a network work internally.

 In Part 2 (Moving Around the City), we expand outward. Multiple buildings form a city – an analogy for the internet. We’ll see how messages travel across the city, guided by concierges (routers) and roads (cables), and how global addressing and directories help data find its destination.

 In Part 3 (Hotels in the Cloud & Future Cities), we look at more advanced or modern networking concepts. We’ll check into “hotels” (cloud computing) to see how renting a room in someone else’s building works. We’ll also touch on future-forward ideas and technologies – the “city planning” of networks – like IPv6 (a new addressing scheme), software-defined networking (rebuilding hallways on the fly), and more.

 In Part 4 (Becoming an Architect), we conclude by turning the analogy around: now that you’ve learned the layout, it’s time to become the architect. This part guides you on how to design and think about networks (buildings and cities) yourself, bridging the analogy back to real-world network architecture.

 Finally, there’s an Appendix with a handy concept mapping table (network terms to analogy terms) for quick reference.

Networks as Buildings

Analogy: A computer network visualized as a building with many rooms and hallways. Imagine a large building filled with countless rooms, connected by hallways and staircases. Each room in the building represents a single computer or device, and the room’s number (like “Room 101”) acts as that computer’s address on the network (its IP address). People (or let’s say, messages) walk through hallways to visit different rooms – this movement through hallways is like data moving between computers within a network.

In this simple analogy, the entire building is a network. The rooms inside are the individual devices, and the hallways are the communication links that allow movement (data transfer) within the building. Just as you might talk to someone in another room by walking down the hallway and knocking on their door, one computer sends data to another by sending it through the network’s “hallways.”

Let’s break down the basic components of this building analogy:

 Building = Network: The whole structure containing everything is the network itself. A small building might be like a home network, whereas a huge skyscraper could represent a large corporate network.

 Room + Room Number = Computer + IP Address: Each room is a computer or device. The room number (e.g., Room 101) is the unique identifier for that room within the building – similarly, an IP address uniquely identifies a device on the network (at least within its own network).

 Hallways = Network Connections (Cables/Wi-Fi): The corridors, staircases, and doors connecting rooms are the pathways data takes. Whether it’s an Ethernet cable or a Wi-Fi signal, these are like hallways that allow movement within the building.

 Language = Network Protocol: In a building, people might all speak a common language to understand each other. In a network, devices must use the same protocol to communicate – a set of rules that define how messages are formatted and transmitted.

 To extend this analogy: Buildings have specific purposes. Some are homes, others are offices, hospitals, or malls. Likewise, networks come in different types optimized for their use. A small home network (like a cozy house) is designed for simplicity and convenience. A business might have an office network (an office building) designed for efficiency and security. A data center network is like an industrial complex or a specialized facility built for heavy duty – optimized for large-scale data processing and storage. The design of each building reflects the needs of its occupants, just like a network’s design reflects its intended purpose

Different “building” types = Different network types: You can think of a LAN (Local Area Network) as a single building – typically under one roof, owned and operated by one entity (like your home or an office). A WAN (Wide Area Network), on the other hand, is more like a campus or a cluster of buildings in different locations connected by roads (communication lines). A data center network could be imagined as a highly optimized, specialized building (like a high-security bank or research lab) where the internal structure is built for speed and reliability above all.

Now, one building by itself is a contained world. But networks rarely live in isolation – just as buildings exist in neighborhoods and cities. Before we go city-wide, however, we need to further design our building’s internal structure. Let’s go floor by floor and room by room, fleshing out this analogy.
Technical Perspective: In reality, a computer network is a collection of interconnected devices (computers, servers, phones, etc.) that can communicate with each other. This communication follows standard protocols (rules), and each device is identified by an IP address (similar to how each telephone has a unique number or each house has a unique address). Networks can be small (a few devices in a home) or enormous (thousands of devices in a corporate or campus network). Just as a building might have internal room numbers that only make sense inside that building, many networks use private IP addresses internally. To the outside world (the internet), the entire network might be known by a single public IP address (comparable to the building’s street address). The building analogy is a starting point: it helps illustrate concepts like internal structure, addressing, and the idea that a network has boundaries (walls) and entry/exit points (doors). Keep in mind that while the analogy simplifies things, a real network involves hardware (cables, routers, switches) and software working together according to networking protocols.
Designing Network Floors

Every large building has multiple floors, and each floor groups certain rooms together. In our network-as-building analogy, each floor represents a subnetwork (subnet) – a subdivided portion of the larger network. We design floors in a building to organize rooms (maybe by department or function), and similarly we design subnets in a network to organize computers for security or efficiency.

Analogy: Different floors in a building represent different sub-networks within a larger network. Suppose you have a company’s office building. The company decides that the HR department will occupy Floor 2 and the Engineering team will occupy Floor 3. By doing this, people (and communications) on the same floor can interact freely, while movement between floors is more controlled (perhaps you need to take an elevator or have permission to access a different floor). This is just like a network where you create subnets: computers on the same subnet (floor) can talk to each other easily, but to communicate with a different subnet (another floor) the traffic might need to go through some controlled gateway or router (more on elevators and routers soon!).

Why would we separate groups like this? In a real building, you might separate floors by department to reduce unnecessary foot traffic and increase security. In networks, we use subnets to localize traffic and improve performance and security. For example, the HR computers (handling sensitive data) stay within their own subnet so their traffic is isolated from Engineering’s streaming of code builds or test data.

Identifying a room by floor and number: If someone tells you “Room 101” without context, you might ask, on which floor? In a building, Room 101 on Floor 1 is a different location from Room 101 on Floor 3. So usually we specify both floor and room: “Floor 3, Room 101.” Networks do something similar. A device’s full address can include the subnet info and the host info. For example, consider an IP address like 192.168.3.101. Here, part of it (192.168.3.x) could identify the subnet (floor) and the rest (x) identifies the specific room (device) on that floor. Within its own floor, you can reach Room 101 directly. But to reach “Room 101 in another building,” you’d need that building’s address too. In networking terms: inside your network, you use private addresses freely. But to go to a different network, you need that network’s address (the public IP, plus some help from routers).

As an analogy, a full address might look like:

Building X, Floor 3, Room 101

This is akin to saying “Device at IP 192.168.3.101 in Network X.” Within Building X you only needed “Floor 3, Room 101,” but from outside you specify the building as well.

Designing a floor (subnet) effectively involves a couple of considerations:

 Hallway Width (Bandwidth): How wide are the corridors on this floor? Hallway width represents network bandwidth on the subnet. Wider hallways (higher bandwidth) allow more people (data packets) to move simultaneously with ease. For high-traffic floors (say, the Engineering floor where they transfer big files), you’d design wider hallways. In network terms, this could mean using faster switches or higher capacity links for that subnet

 Number of Rooms (Subnet Size): How many rooms can you fit on this floor? This corresponds to how many IP addresses (devices) the subnet can accommodate. A small floor might have only a few rooms (a subnet that supports maybe 6 devices, e.g. a /30 subnet with 4 usable IP addresses), which is easier to manage and secure. A big floor can host many rooms (e.g. a /16 subnet with 65,536 addresses) but can be harder to manage if it’s too crowded
 . There’s a floor plan that governs this – in networking that’s the subnet mask or prefix length. Think of the subnet mask as the blueprint that says “this floor can only have this many rooms.” For instance, a subnet mask of 255.255.255.0 (a “/24” prefix) is like a floor plan that allows 254 rooms on that floor. If you need more rooms, you’d use a different mask (blueprint) or add another floor.

To illustrate subnet sizing:

 Big floors: A large subnet (like /16) is a floor with a huge number of rooms. Useful for a large office or campus where you might have tens of thousands of devices on the same network. But just as a massive single floor can get unwieldy (imagine trying to navigate a floor with 65,000 rooms!), a huge subnet can suffer from inefficiencies like broad traffic broadcasts.

 Small floors: A tiny subnet (like /30 or /29) might only allow a handful of rooms. This could be used for point-to-point links or very small offices. It’s easy to manage but not very flexible if you need to add more rooms/devices.

In practice, network architects carefully plan how to “floor-plan” their networks: balancing size and performance. You wouldn’t want a single floor for your entire corporation if it makes more sense to have each department on its own floor.
Technical Perspective: A subnet is a logically visible subdivision of an IP network. When we talk about subnets, we often use terms like subnet mask or CIDR prefix (e.g., /24) to denote how the IP addresses are split between the network portion and the host portion. The subnet mask is essentially the “floor plan” – it determines which part of an IP address denotes the subnet (floor) and which part denotes the host (room). For example, in the IP 192.168.3.101/24, the /24 mask means the first 24 bits (192.168.3) are the network portion (identifying Floor 3, so to speak) and the last 8 bits (101) are the host identifier on that subnet
. Devices within the same subnet can reach each other directly (like people moving within the same floor) without involving a router. But when a device needs to talk to a device on a different subnet, it must go through a gateway (which we’ll cover soon, analogous to an elevator connecting floors). In technical terms, subnets help manage traffic by limiting broadcast domains and organizing the network into smaller, more efficient segments. Networks are often designed with multiple subnets to improve performance and security – for instance, separating a guest Wi-Fi network from an internal company network is like giving guests their own floor in the building, with the elevator as a checkpoint between guests and secure areas.
Computers as Rooms

If our building is the network, then each room inside it is a computer (or any networked device). Just like rooms in a building, computers in a network come in all shapes and sizes and serve different purposes: one room might be a quiet office, another a noisy cafeteria; one computer might be a server, another a user’s laptop. Each room can be occupied (running applications) and has people coming in and out (data being sent/received).

A room’s design and content depend on its occupants. In an office building, Room 101 might be Accounting, filled with filing cabinets and calculators (I know, cliché), whereas Room 102 is a conference room with projectors and speakerphones. In networking, a computer’s role (what services or software it runs) determines what kind of “furniture” or setup it has. A database server is like a records room with locked cabinets (lots of data stored securely). A web server might be like a reception room with lots of pamphlets ready to give out (it serves web pages to anyone who asks).

Doors = Network Interfaces: How do things get in and out of a room? Through doors. In networking, a door represents a network interface on the computer. Most rooms have at least one main door; most computers have at least one primary network interface (like your laptop’s Wi-Fi or Ethernet port). Some rooms have multiple doors – maybe a door to the hallway and another connecting to an adjacent room. Similarly, a computer can have multiple network interfaces: perhaps an Ethernet connection and Wi-Fi, or even Bluetooth – each is a “door” connecting it to some network.

Let’s explore the idea of multiple doors in a room:
Multiple Doors

A single room can indeed have several doors leading to different places, and each door provides a unique way to enter or exit the room. Here’s how that maps to computers:

 Main Door: The primary way in and out. For a device, this is typically its primary network interface – often an Ethernet port or Wi-Fi antenna. This is how the bulk of traffic comes and goes. It’s like the front door where regular visitors enter. For example, your PC’s Ethernet port connecting to the office LAN, or your phone’s Wi-Fi radio connecting to your home router.

 Maintenance Door: Some rooms have a back door for staff or deliveries. On a computer, this could be a secondary interface used for special purposes, such as a management network or a VPN connection. Think of servers that have a dedicated management port – it’s not used by general traffic, only by administrators (janitors of the network) to perform maintenance. Another example: your computer might have a second network card or a USB tethering interface – not the main one you use for everyday internet, but there in case it’s needed.

 Emergency Exit: This is rarely used but absolutely crucial in a crisis – like those fire exits you only open when something’s really wrong. For networking, an “emergency exit” could be a backup connection. Imagine a critical server that normally uses a wired connection but has a 4G wireless backup link if the wired network fails. Or a secondary ISP link for when the primary goes down. It could also be an automatic failover interface. Most of the time it sits unused (door is closed), but when disaster strikes (the main door is blocked), it becomes vital.

Each door (network interface) has its own identifier, just like each door in a real building might have a unique key or number. In networking, the unique ID for a door is often the MAC address – a hardware address assigned to the network interface. You can think of the MAC address as a “door ID” that ensures the right person or packet goes to the right door. So even if two rooms have the same layout, their doors are uniquely labeled so the floor manager (switch) can tell them apart.

Also, some rooms have internal doors connecting to adjacent rooms (like suites of offices with interior connecting doors). Similarly, a computer might have a virtual or internal network connecting to another (for example, virtual machines on one host connecting via an internal bridge – but that’s like secret passages which we won’t dive too deep into here).

One more point: If a door is locked or broken, the room is inaccessible. In network terms, if a network interface is shut down or misconfigured, that computer effectively can’t be reached from that path – like a closed door
. This is why network downtime often feels like you’re knocking on a door nobody is opening.

We now have a building with multiple floors (subnets) and rooms (computers) with doors (interfaces). But how do we make sure messages get to the right room efficiently? In a big building, you don’t wander the halls randomly hoping to find “Bob in Room 203.” Instead, large buildings have some directory or at least someone to ask for directions. In our network building, that role is handled by devices like switches and routers – the subject of the next chapters.
Technical Perspective: An individual computer or host on the network is identified by its IP address (analogy: room number) and communicates through one or more network interfaces (doors). Each network interface has a MAC address (a unique physical identifier for that interface) which operates at Layer 2 of the OSI model (the data link layer). In technical terms, if a computer has multiple network interfaces, it can be connected to multiple networks or multiple segments of the same network. For example, a workstation might be connected to both a wired Ethernet and a Wi-Fi network simultaneously (just as a room might have two doors to different hallways). Networking software on the computer handles each interface separately, and typically the system decides which interface to use for outgoing traffic based on routing rules (often the main interface unless a specific route says otherwise). The concept of an “emergency exit” in networking might correspond to redundancy: mission-critical systems often have redundant network connections (and even redundant power) so that if one fails, the other picks up – this is seen in servers with dual NICs (Network Interface Cards) configured for failover. The MAC addresses ensure that switches can direct traffic to the correct interface. If you send a packet to an IP, it gets resolved (via ARP) to a MAC address – essentially finding which door leads to that IP – and then delivered to that specific interface. If the interface is down, no entry. Thus, managing interfaces (doors) is a key part of network administration: enabling/disabling ports, setting up secondary links, etc., all ensure that the “rooms” stay accessible and communication flows through the right “doors.”
Switches as Floor Managers

So you’re on Floor 2 of the building, and you want to send a file (message) to your colleague in Room 203 on the same floor. How do you ensure it gets there? You could wander the hallway, knocking on every door, “Is this 203? No... Is this 203?” That’s terribly inefficient. In well-run buildings, there’s usually a floor manager or a directory on each floor to direct you.

In our network building, a switch is like the floor manager (or a helpful concierge on that floor). The switch knows exactly which door corresponds to Room 203. In practice, when you (Room 201, say) send data intended for Room 203, the switch on that floor checks the destination and says, “Ah, Room 203 is down the hall, third door on the left,” and forwards your message directly to that door. You, the sender, don’t have to broadcast your message to every room hoping it finds the right one; the switch takes care of delivering it to the correct recipient.

How does the switch know which door (network interface) belongs to Room 203 (a specific computer)? It maintains a list – essentially a mapping of room numbers (IP addresses) to door IDs (MAC addresses) on that floor. This is analogous to an employee directory listing who’s in which room, or a guest list that the floor manager checks. If you tell the floor manager “I need to get this to Alice in Room 203,” the manager quickly references the list and hands the message to the door for Room 203. In networking, switches keep a table often called a MAC address table that maps MAC addresses to the physical ports on the switch. And ARP (Address Resolution Protocol) serves as a kind of “guest list” mechanism where devices learn the MAC corresponding to a given IP so that the switch can route accordingly

Another important point: Switches work within a single floor (single subnet). A floor manager doesn’t care about what’s happening on Floor 3 or Floor 10; they only deal with their floor’s rooms. If you ask them about a room on another floor, they’ll likely send you to the elevator (gateway) or the building concierge (router) – which we’ll get to in a moment. This means a switch is typically used for LAN (Local Area Network) connectivity, forwarding data between devices in the same network segment. It uses MAC addresses (layer 2 information) to make forwarding decisions, ignoring any external networks.

To summarize the role of a switch: it efficiently connects devices within the same network. By delivering messages only to the intended recipient, it reduces unnecessary traffic (imagine if every conversation on a floor had to be shouted to all rooms – chaotic!). Switches essentially create a direct line between the sender and receiver on that floor once they know each other’s addresses, much like a good floor manager quietly delivers mail to the exact office without bothering the others.
Technical Perspective: A network switch operates at the Data Link layer (Layer 2 of the OSI model). It’s a device with multiple ports, each port usually connected to one device (or one room, in our analogy). When a frame (a data packet at Layer 2) arrives at a switch, the switch looks at the frame’s destination MAC address. It consults its MAC address table to see which port (door) corresponds to that MAC. If it finds a match, it forwards the frame out only that port, effectively delivering the message to the correct device. If it doesn’t know the MAC (like someone new moved into Room 203 and the floor manager hasn’t met them yet), the switch may broadcast the frame to all ports on that subnet to ask “Who has this MAC address?” (this is analogous to calling out “Room 203, where are you?”). The device with that MAC will respond, and the switch learns which port that device is on and updates its table. All this happens in milliseconds. Switches greatly increase network efficiency compared to older hubs (which were like shouting to all rooms because hubs send incoming data to all other ports blindly). Also, ARP (Address Resolution Protocol) is the mechanism where a device that knows another device’s IP address can learn its MAC address by broadcasting a query on the LAN
. The response (from the target device) lets the sender and the switch know the mapping of IP to MAC (room number to door ID). In short, switches + ARP together ensure that within a LAN, traffic goes only where it needs to, and every device’s “door” is known to the network. Remember, switches do not typically look at IP addresses or route between networks – that’s the router’s job (coming up next). They simply switch frames on the local network, making them one of the fundamental building blocks of a LAN.
Routers as Building Concierges

Now let’s say you’re on Floor 1 (Engineering) and you need to send a message to Room 504 on Floor 5 (perhaps the Executive offices) in the same building. The floor manager (switch) on Floor 1 looks at the destination and realizes, “Room 504 isn’t on this floor.” So what happens? The switch passes your message up to the building concierge, which in our analogy is the router.

A router is like the concierge or information desk in the lobby that knows the whole building’s layout. While each floor’s manager knows only their own floor, the router knows how to get from floor to floor – effectively connecting the subnets/floors together. If Floor 5 is a different subnet, the router is the device that can shuttle data between Floor 1 and Floor 5 networks.

Here’s how the interaction goes in the building scenario:

 You hand your message to the Floor 1 manager (switch) saying it’s for Room 504.

 The Floor 1 manager says “Not on this floor – I’ll forward this to the building concierge.”

 The router (concierge) in the lobby looks at the address: Room 504, Floor 5. The router has a map of the building – essentially a plan of which floors exist and how to reach them (this is analogous to a routing table). It figures out the best way to send your message to Floor 5. Maybe it knows that Elevator B goes to floors 4-6, so that’s the one to use.

 The router then puts your message into the elevator (gateway) that will carry it up to Floor 5.

 Once at Floor 5, the local switch/floor manager takes over and delivers the message to Room 504’s door.

So, the router’s job is inter-floor (inter-network) navigation. It doesn’t deliver to the individual room (that’s the switch’s job once on the correct floor); instead, it makes sure the message gets to the right floor in the first place. In networking terms, a router connects different networks (subnets) and directs packets based on their IP addresses (which include network information like the floor). It decides the next “hop” or next network to forward the packet towards its destination.

Think of the router as the one who holds the master key to the building – not literally, but it has the authority to move between floors and is aware of the big picture. Without the router, each floor (subnet) would be isolated, and you couldn’t easily send data from one to another.

Also, routers often have to make decisions about which path is best. In a huge building with multiple elevators and stairs, the concierge might think “Hmm, Elevator A is busy, let’s send this via Elevator B,” or “The usual staircase is closed for cleaning, use the other one.” Similarly, a router can choose between multiple routes if there are options, and it will generally choose the most efficient path according to its programming and network state.

In summary, switch = local delivery on one floor, router = global delivery between floors. One ensures the message goes door-to-door correctly; the other ensures it goes floor-to-floor correctly.
Technical Perspective: A router operates at the Network layer (Layer 3 of OSI). Its primary job is to examine the IP address in each incoming packet and decide where to send the packet next so it eventually reaches its destination network. Routers maintain a data structure called a routing table, which is essentially the “map” of known networks and directions on how to reach them
. Each entry in a routing table says, for example, “Network 192.168.5.0/24 is reachable via Interface X (or via the router at the other end of Interface X).” When a packet destined for 192.168.5.42 arrives, the router checks its table and forwards the packet out the appropriate interface toward that network. If the router is connected to multiple networks (like multiple floor connections), it’s effectively the junction point. Routers also handle traffic between networks with different rules or architectures. For instance, they can perform Network Address Translation (NAT) when going between private and public networks (more on NAT later, which is akin to a front desk translating addresses). Because routers look at IP addresses, they form the backbone of internetworking – connecting LANs into WANs and ultimately to the internet. They often run routing protocols (like OSPF, BGP, etc.) to exchange information with other routers, ensuring their maps stay up-to-date. An important difference from switches: a switch doesn’t modify the packet, it just forwards frames within one network. A router will decapsulate the frame, inspect the IP packet, decrement its TTL (time-to-live), change source/dest MAC addresses for the next hop, and forward it – possibly even fragmenting it if necessary. This process is analogous to the concierge taking your letter, reading the address, maybe stamping it or repackaging it for the elevator, and sending it on its way. Without routers, modern networks could not scale; every network would be an island. With routers, we can link networks of different types (Ethernet, fiber, wireless) and different address ranges into one large, global network (the internet). So, routers are indeed the concierges that connect the whole “building” of the internet together, floor by floor.
Gateways as Elevators

We’ve hinted at elevators already, and here they come into play. In our building analogy, the gateway is like an elevator that connects floors. Let’s clarify the relationships:

 The switch is the floor manager on each floor (manages local delivery).

 The router is the building concierge that knows how to navigate between floors.

 The gateway (often used interchangeably with the router’s function in home networks) is conceptually the connection point that takes you from one network to another. In our analogy, that’s the elevator shaft and elevator car moving between floors.

When you want to move from one floor to another, you typically step into an elevator (or take stairs, but elevator is easier for our analogy because it’s a single point connecting multiple floors). The elevator doesn’t care who you are or what you’re carrying; it just knows it needs to move things between floors. It provides a path from, say, Floor 1 to Floor 5.

Similarly, a network gateway is a device or node that serves as an access point to another network. Usually, the router on your local network acts as the default gateway – it’s the thing your computer sends data to when the destination is on a different network. The gateway’s job is not to inspect the fine details of your message (it’s not reading your mail content), but simply to transport your data to the correct next network (the next “floor”).

In simple terms: gateway = elevator. If you’re on Floor 1 and need to get to Floor 5, you take the elevator up. If your PC on Network A needs to send data to Network B, it sends it to the gateway (router), which then moves that data into Network B.

What’s important here is that gateways often also handle differences between networks. Imagine if Floor 1 is a library and Floor 2 is a warehouse – maybe the elevator has to adjust to carry different kinds of loads (books vs pallets). In networking, a gateway might translate or encapsulate data when moving between dissimilar systems or protocols. For example, a gateway between an email system and a text-messaging system would translate email to SMS format. But for our standard IP networks, the gateway (router) mostly just forwards IP packets from one subnet to another, as we described.

From a user perspective, the gateway is usually just an IP address configured on your device as the “route to anything not on my local network.” It’s like telling your room, “If the destination isn’t on this floor, call the elevator at IP 192.168.1.1” (which is often a home router’s IP).

So the visual: the elevator takes the message from the floor’s switch up (or down) to the destination floor’s switch. Once it arrives, the local floor manager handles it from there.
Technical Perspective: In networking, a gateway typically refers to a router interface that serves as an entry/exit point to a network. For example, in a home network, your router might have an IP 192.168.1.1 – this is the default gateway for all devices in the 192.168.1.x network. When your laptop 192.168.1.50 wants to reach a device on the internet (say 172.217.5.110, a Google server), it recognizes that the destination is not in its own subnet. According to its routing table, it sends the packet to the default gateway (192.168.1.1). The router receives it and then routes it out towards the internet. The term gateway can also mean more complex protocol translating devices (e.g., an email-to-SMS gateway, or a voice-over-IP gateway converting between telephone audio and internet packets), but in IP networking, it usually just means “the router that I send stuff to in order to reach other networks.” Gateways ensure interoperability — even between different protocol families if needed — but most commonly they just connect IP networks. They operate at multiple layers: at minimum, Layer 3 (IP routing) and often Layer 4 or higher if doing more fancy translations. In sum, whenever you see “Default Gateway” in your network settings, think “this is the elevator I take to get out of my floor.” The gateway has one foot in your local network and another in the outside network, shuffling data between the two.
A Message’s Journey

Now that we have the cast of characters (rooms, doors, switches, routers, gateways), let’s put it all together in a short story. This will illustrate the typical path of a message inside a building-network and then beyond.

Scenario: You are in Room 101 on Floor 1 (let’s say that’s your laptop on the Engineering subnet) and you want to send a message to Room 504 on Floor 5 (maybe the CEO’s computer on a Management subnet).

Here’s the journey step-by-step:

 Starting Point – Room 101 (You): You write the message and address it to “Room 504, Floor 5.” In networking terms, your computer prepares a data packet with destination IP belonging to the Floor 5 subnet.

 Local Floor Check – Switch on Floor 1: You hand the message to the Floor 1 switch (your network interface sends the packet to the switch). The switch looks at the destination. Room 504 is not on Floor 1, so the switch doesn’t know which port leads there. It effectively says, “This isn’t on my floor – I need to send this to the router (concierge).”

 Hand-Off to Router – Building Concierge: The Floor 1 switch forwards the packet to the router (which is configured as the gateway). The router, being the concierge, checks its routing table (the building map). It sees that Room 504 is on Floor 5, which it can reach via the appropriate interface/elevator.

 Routing the Message – Going up: The router puts the message into the correct “elevator” (gateway) that will take it to Floor 5. Perhaps the router has an interface connected to a backbone that runs through all floors. It encapsulates the packet accordingly and sends it upward.

 Arrival at Floor 5 – Switch on Floor 5: The message comes out of the elevator on Floor 5 and is handed to the Floor 5 switch. Now we’re back to a local scenario on that floor. The switch there knows exactly where Room 504 is (it has a MAC table entry for Room 504’s computer). It delivers the message to Room 504’s door without bothering any other rooms.

 Message Received – Room 504: The CEO’s computer in Room 504 receives the message you sent. Success!

If we reverse it (Room 504 replies to Room 101), the same sequence happens in the opposite direction: Floor 5 switch -> router -> Floor 1 switch -> Room 101. The key is, each player (room, switch, router, elevator) has a specific role and they cooperate to deliver data accurately.

Now, all of this was within one building (one network domain). What if Room 101 wanted to send a message to a room in another building entirely? Perhaps an entirely different company or someone across town? This is where we extend the analogy out to a city of buildings – which represents the wider internet beyond your local network.

(Pun time: we’ve been building up this analogy, and now it’s time to construct an entire city out of it!)

Before we move on, let’s do a quick check: We covered how data moves around inside a network (building). We have floors (subnets) isolating internal groups, and switches/routers working together so that a message can travel from one room to any other room in the same building. The next step is going outside the building.

Imagine you’re in your building and you want to deliver a package to someone in another building across town. You’d need to step outside, find the address, travel through city roads, etc. That’s what happens when you send data to a different network across the internet. So let’s zoom out from one building to the entire city.
Technical Perspective: The journey described is essentially what happens when a packet travels from one host to another on a different subnet within a LAN or campus network. To put it in networking terms: The source computer determines that the destination IP is not in its own subnet (Floor 1 vs Floor 5), so it sends the packet to the default gateway (router). The switch (Layer 2) forwards it to the router’s MAC (because the packet’s destination MAC at this point is the router’s MAC, while the destination IP is the final target’s IP). The router receives the packet, consults its routing table, changes the source/destination MAC on the packet to appropriate values for the next hop (which in this case is the Floor 5 switch or the host on Floor 5 if directly connected), and forwards it. The packet travels through whatever backbone or inter-floor connection the router uses (maybe a trunk line analogous to the elevator shaft). When it arrives on Floor 5’s network, the process is reversed: the packet is delivered to the target host’s MAC by the Floor 5 switch. Every step corresponds to a layer in the OSI model doing its job: application data (message contents), packed into transport segment (perhaps TCP), wrapped in an IP packet (with IP addresses for Room 101 and 504), then wrapped in an Ethernet frame with MAC addresses as it goes from hop to hop. Each router hop rewrites the Layer 2 info but preserves the Layer 3 info until final delivery. What we described is often called the routing process on a single network campus. The moment we try to go to another building (another autonomous network, like across the internet), we introduce more routers, possibly DNS lookups to find the building’s address, and so on – which we’ll cover next. The important technical takeaway here is understanding the role of each component: switches confine traffic to the local network and do fast frame switching, while routers move packets between networks, each time making a routing decision. This cooperation yields a scalable network where any host can talk to any other, if allowed, via a series of these steps.
Private vs. Public IP Addresses

Up to now, we talked about addresses like room numbers that work fine inside your building. But if someone outside the building wants to send you a letter, “Room 101” is not enough information – they need the building’s street address. Similarly, in computer networks, we have private addresses (usable within your local network/building) and public addresses (usable globally, across the internet city).

Inside your building, room numbers can repeat what other buildings use. There might be a Room 101 in Building A, Building B, Building C, etc. As long as those buildings are separate, it’s not a problem – just like private IP addresses can repeat in different networks (for example, many home networks use 192.168.0.101; that’s fine because each home is a separate “building”). These private IPs are unique within their own network but not necessarily globally unique.

When data needs to travel outside your network to another network, that’s like sending mail to another building. For that, you rely on a public IP address for your network – analogous to the official street address of your building.

 Private IP (Room Number): An address that is meaningful only within your local network (building). E.g., 192.168.1.101 might be your laptop’s private IP. If you go to a friend’s house (another network), they might also have a device at 192.168.1.101 – no conflict, because your two networks are separate realms.

 Public IP (Building’s Street Address): An address that is unique across the entire internet (city). It represents your whole network when communicating with the outside world. For instance, your home router might have a public IP like 203.0.113.42 assigned by your ISP. That’s the address other networks use to reach your network. It’s like the delivery trucks in the city using your street address to find your building.

How do these work together? Consider downloading a file from a server on the internet:

 Your computer (Room 101) wants data from some server (in another building across town).

 It addresses the request to that server’s public IP (the other building’s address).

 The request goes out of your building via the router (concierge) and gets onto the city roads (internet). It carries with it your building’s public address as the sender, because outside your building, nobody knows about “Room 101” specifically – they only know how to send replies back to your building in general. Once the reply gets to your building’s lobby, the router will then distribute it internally to the right room.

 When the server responds, it sends data to your building’s public IP (like addressing a package to your building). Once that arrives, your building’s staff (router/NAT) figures out which internal room requested this and forwards it to your Room 101.

This separation is crucial for both practicality (limited address space, we can reuse private ranges internally) and security (external entities can’t directly address internal rooms without going through the front desk/router).

So, in short: private IP = your room number inside the building, public IP = your building’s address in the city
. We’ll talk later about NAT (Network Address Translation), which is like the front desk that translates between the two schemes.

For now, remember that there’s a distinction between how devices identify each other locally versus globally. It’s as if every building has an internal phone system (room extensions) and one main phone line number for the outside.
Technical Perspective: IP address classes aside (since we mostly use CIDR now), the concept is straightforward: Private IP ranges (per RFC 1918) are blocks of IP addresses set aside for use in private networks (e.g., 10.0.0.0/8, 172.16.0.0–172.31.0.0/16, 192.168.0.0/16). These addresses are not routable on the public internet. That means internet routers will drop packets coming from (or going to) these addresses because they assume they should stay within local networks. Public IP addresses are globally unique addresses assigned to devices that are directly reachable over the internet. They are allocated by regional internet registries to ISPs and organizations. In a typical home or small business setup, all your devices use private IPs internally, and your router (or firewall) has one public IP that the rest of the world sees. When one of your devices initiates a connection to the internet, your router uses Network Address Translation (NAT) to swap the private source IP with the router’s public IP on outgoing packets. It also keeps track of these mappings so that when a response comes back to that public IP (with a certain port), it knows which internal IP/port to forward it to . this is similar to how a receptionist might handle phone calls from internal extensions: if extension 12 calls out, the outside world sees the main number on caller id; when a call comes back, the receptionist asks, “okay, who was expecting a call? extension 12, here you go.” private vs public addressing helps conserve the limited pool of ipv4 addresses and adds a layer of isolation – external hosts cannot directly initiate a connection to an internal private ip without some port forwarding or established outbound connection because the router will not know where to send it (or might actively block it). understanding this concept is critical for network design and troubleshooting, because “it works on my lan but not from outside” is often an issue of addressing and nat.
. This is similar to how a receptionist might handle phone calls from internal extensions: if extension 12 calls out, the outside world sees the main number on Caller ID; when a call comes back, the receptionist asks, “Okay, who was expecting a call? Extension 12, here you go.” Private vs public addressing helps conserve the limited pool of IPv4 addresses and adds a layer of isolation – external hosts cannot directly initiate a connection to an internal private IP without some port forwarding or established outbound connection because the router will not know where to send it (or might actively block it). Understanding this concept is critical for network design and troubleshooting, because “it works on my LAN but not from outside” is often an issue of addressing and NAT.
DNS: The Public Directory

Continuing our city analogy: suppose you want to send a letter to "Hotel Sunrise" in another city. You know the name of the place, but not the street address. What do you do? You look it up in a directory or call information. In networking, when you have a name like memo.mx or google.com but you need the numeric IP address to actually send data, you use DNS.

DNS (Domain Name System) is like the public directory of the internet
. It’s essentially the phone book or address book that maps human-friendly names to IP addresses. Humans are good at remembering names (“Hotel Sunrise” or “memo.mx”), whereas computers route information using numbers (IP addresses). DNS bridges that gap.

How does it work in our building analogy?

 Each building in the city might register itself in a city-wide directory by name. “Hotel Sunrise” might be at 123 Palm Street. “Memo’s Office” might be at 500 Tech Avenue.

 When you (Room 101 in Building A) want to contact memo.mx, your building staff (your computer or local network) will first check a directory service: “What’s the address of memo.mx?” This is like looking up the building in a phone book.

 DNS servers across the internet hold these mappings. If your local directory (DNS cache or server) doesn’t know, it will ask a higher authority (perhaps a root DNS server, then .mx domain server, etc., similar to how you might first check a local phone book, then city directory, then national directory if needed).

 Eventually, the DNS query returns an answer: “memo.mx is at 203.0.113.5” (for example – not an actual IP, but as an example).

 Now that you have the address (IP), you can send your message out addressed to that building.

It’s like having a global, automated switchboard. Instead of you manually thumbing through a phonebook, your computer does this behind the scenes in milliseconds. You type a website name, hit enter, and DNS resolves that name to an IP so your messages know where to go.
